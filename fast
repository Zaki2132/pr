import requests
import csv

API_KEY = "raoid7"  # Remplace par ta vraie clé complète
BASE_URL = "https://eu.api.insight.rapid7.com/vm/v4/integration/assets"
HEADERS = {
    "Authorization": f"ApiKey {API_KEY}",
    "Content-Type": "application/json",
    "Accept": "application/json"
}

def get_all_assets():
    url = BASE_URL
    all_assets = []

    while url:
        print(f"Requête vers : {url}")
        response = requests.post(url, headers=HEADERS, json={"filters": [], "size": 100})

        if response.status_code != 200:
            print(f"❌ Erreur {response.status_code}")
            print(response.text)
            break

        data = response.json()
        assets_batch = data.get("data", [])
        all_assets.extend(assets_batch)
        print(f"→ {len(assets_batch)} assets ajoutés (Total: {len(all_assets)})")

        # Trouver le lien vers la page suivante
        next_url = None
        for link in data.get("links", []):
            if link.get("rel") == "next":
                next_url = link.get("href")
                break
        url = next_url  # si None, on arrête

    return all_assets

def export_assets_to_csv(assets, filename="assets.csv"):
    if not assets:
        print("Aucun asset à exporter.")
        return

    # Collecter tous les champs (clé de tous les assets)
    all_fields = set()
    for asset in assets:
        all_fields.update(asset.keys())

    # Écriture dans le fichier CSV
    with open(filename, "w", newline="", encoding="utf-8") as f:
        writer = csv.DictWriter(f, fieldnames=sorted(all_fields))
        writer.writeheader()
        for asset in assets:
            writer.writerow(asset)

    print(f"✅ Export terminé : {filename} ({len(assets)} assets)")

# === Main ===
if _name_ == "_main_":
    assets = get_all_assets()
    export_assets_to_csv(assets)
